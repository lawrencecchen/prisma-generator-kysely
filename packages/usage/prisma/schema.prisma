// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator kysely {
  provider = "npx prisma-generator-kysely"
  output   = "./types"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

enum JobType {
  NOW
  REPEAT_CRON
  REPEAT_EVERY
  DELAY_UNTIL
  DELAY_FOR
}

model Job {
  id             String        @id @default(uuid())
  recurringJobId String?
  recurringJob   RecurringJob? @relation(fields: [recurringJobId], references: [id])

  request_url    String
  request_method String
  request_header String
  request_body   String?
  request_time   DateTime

  type         JobType
  repeat_cron  String?
  repeat_every String? /// `ms` value
  delay_until  DateTime?
  delay_for    String? /// `ms` value

  timezone  String?
  startDate DateTime?
  endDate   DateTime?

  response_header String?
  response_body   String?

  @@index([recurringJobId])
}

model RecurringJob {
  id   String @id @default(uuid())
  jobs Job[]

  request_url    String
  request_method String
  request_header String
  request_body   String?
  request_time   DateTime

  type         JobType
  repeat_cron  String?
  repeat_every String? /// `ms` value
  delay_until  DateTime?
  delay_for    String? /// `ms` value

  timezone  String?
  startDate DateTime?
  endDate   DateTime?
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
